{
	"info": {
		"_postman_id": "d9f7392d-980d-4b8f-bdc9-325817f8d33e",
		"name": "Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27252158"
	},
	"item": [
		{
			"name": "getExchanges",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has 'supportedExchanges' property\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('supportedExchanges');",
							"});",
							"",
							"pm.test(\"Each supportedExchange item is a non-empty string\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.supportedExchanges.forEach(exchangeName => {",
							"        pm.expect(exchangeName).to.be.a('string');",
							"        pm.expect(exchangeName).to.not.be.empty;",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v1/exchanges",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v1",
						"exchanges"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMarkets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of market objects\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"    jsonData.forEach(item => {",
							"        pm.expect(item).to.have.property('exchange');",
							"        pm.expect(item).to.have.property('price');",
							"    });",
							"});",
							"pm.test(\"At least two different exchanges are present in the response\", function () {",
							"    const jsonData = pm.response.json();",
							"    let uniqueExchanges = new Set();",
							"",
							"    jsonData.forEach(item => {",
							"        uniqueExchanges.add(item.exchange);",
							"    });",
							"",
							"    pm.expect(uniqueExchanges.size).to.be.at.least(2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v1/markets?coinId={{coinType}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v1",
						"markets"
					],
					"query": [
						{
							"key": "coinId",
							"value": "{{coinType}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getFiats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of fiat objects\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"    jsonData.forEach(item => {",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('symbol');",
							"    });",
							"});",
							"",
							"pm.test(\"Response contains collection variable 'currency'\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"currency\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v1/fiats",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v1",
						"fiats"
					]
				}
			},
			"response": []
		},
		{
			"name": "getGlobalAvgPrice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has 'chart' property\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('chart');",
							"});",
							"",
							"pm.test(\"Each chart data point is an array with 4 elements\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.chart.forEach(dataPoint => {",
							"        pm.expect(Array.isArray(dataPoint)).to.be.true;",
							"        pm.expect(dataPoint.length).to.equal(4);",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v1/charts?period=1m&coinId={{coinType}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v1",
						"charts"
					],
					"query": [
						{
							"key": "period",
							"value": "1m"
						},
						{
							"key": "coinId",
							"value": "{{coinType}}"
						}
					]
				}
			},
			"response": []
		}
	]
}